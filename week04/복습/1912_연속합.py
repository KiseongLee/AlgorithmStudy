n = int(input())

data = list(map(int, input().split()))

dp = [0] * n

dp[0] = data[0]

for i in range(1, n):
    dp[i] = max(data[i], dp[i-1]+data[i])

print(max(dp))

'''
10
10 -4 3 1 5 6 -35 12 21 -1
'''
# dp의 정의는 dp[i] i번째 까지의 연속된 숫자의 최대합
# 그렇다면 1번쨰는 1번째까지
# 2번째는 2번째 까지 연속된 숫자의 최대합을 말하는 것인데
# 그렇다면 값이 음수도 나올 수 있기 때문에 i가 더해졌을 때와 더해지지 않았을 때를 비교해줘야한다
# 그래서 이렇게 dp배열을 뽑아내는데

# 내가 헷갈렸던 부분은 dp[2]가 아예 안더해져서 예제에서 볼 때, 10이 되야하는 거 아닌가? 생각했다.
# dp의 정의를 잘 생각해보면 2번째까지 연속된 숫자의 최대합을 말하는 것이다.
# 2번째까지 포함이 되던지 안되던지가 아니라, 2번째는 무조건 포함이고 앞에 것을 포함할지 포함하지 않을지를 
# 생각해야한다.
# 왜냐하면 2번째가 포함되지 않는 경우는 이미 앞에서 처리를 해줬기 때문이다.

'''
요약
1. dp의 정의를 정확히 하자
2. dp에서 max값을 때려주면 답이 된다. --> 무조건 마지막것을 뽑아내야한다고 생각했음.

'''

# https://nerogarret.tistory.com/40