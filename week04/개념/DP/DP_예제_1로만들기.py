x = int(input())
# 입력값 받음
d = [0] * 30001
# DP 테이블 정의, 초기값은 0, d는 index값을 1을 만드는 연산 최솟값
for i in range(2, x+1):
    # 반복문 실행 범위 2~x 값까지
    d[i] = d[i-1] + 1
    # X에서 1을 빼는 점화식
    if i% 2 ==0:
        d[i] = min(d[i], d[i//2]+1)
    # X를 2로 나눈 값의 나머지가 0이면, d[i]는 d[i-1]+1값과 d[i//2]+1값과 비교
    # d[i//2]+1 값은 X를 2로 나눈 값의 1을 만드는 연산 최솟값에 +1을 한 값(count)
    if i%3 == 0:
        d[i] = min(d[i], d[i//3]+1)
    # X를 3로 나눈 값의 나머지가 0이면, d[i]는 d[i-1]+1값과 d[i//3]+1값과 비교
    # d[i//3]+1 값은 X를 3로 나눈 값의 1을 만드는 연산 최솟값에 +1을 한 값
    if i%5 == 0:
        d[i] = min(d[i], d[i//5]+1)
    # X를 5로 나눈 값의 나머지가 0이면, d[i]는 d[i-1]+1값과 d[i//5]+1값과 비교
    # d[i//5]+1 값은 X를 5로 나눈 값의 1을 만드는 연산 최솟값에 +1을 한 값

print(d[x])




# dp 테이블이 앞에서부터 갱신한다고 생각하면 쉬움
# 막연하게 dp[28]은 거꾸로 가야지 먼저 하면 헷갈리기 시작한다.
# 처음부터 최솟값으로 계속해서 갱신한다고 생각하자