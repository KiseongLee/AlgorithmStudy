'''
2980_도로와 신호등

신호등의 거리를 기준으로 빨간불과 초록불이 되었을 때를 기준으로 나눠서 푸는 문제였다.
신호등까지의 누적 거리를 통해서 이 신호등이 빨간불인지 파란불인지를 알아야하는 것이 key point였다.

어떻게 나눌까? 하다가 그냥 하려고하다가(빨간불보다 작으면 빨간불 신호 더해주고, 그 다음에는 그냥 초록불 신호 더해주고)
누적 거리를 생각하지 못해서 이렇게 하면 안되겠구나 하고 돌아오는데 조금 헤맴.

그래서 나누기를 사용하면 되겠구나 생각을 했고, 처음에는 몫으로 생각을 했는데
몫은 생각해보니까 한 사이클이니까 의미가 없구나 생각을 했다.
나머지를 생각하여 R보다 작으면 빨간불, 넘으면 초록불이다. 라고 판단

의문이 갑자기 듬
: 초록불과 빨간불 범위에 없으면 어떻게 하지?
-> 초록불만 되면 그냥 지나가는 것이기 때문에 그 순간 초록불인지 빨간불인지만 알면되었다.
그래서 딱 나눠지는 포인트 부분으로 해결



'''

n, l = map(int, input().split())

data = [list(map(int, input().split())) for _ in range(n)]

distance = []
R = []
G = []

distance.append(data[0][0]) 
for i in range(n):
    R.append(data[i][1]) # 빨간불 신호등 시간
    G.append(data[i][2]) # 파란불 신호등 시간
    
    if i<= n-2: # distance -> 신호등 사이 구간으로 배열을 받음
      distance.append(data[i+1][0]-data[i][0])
    else:
      distance.append(l-data[i][0])


# print(distance)
# print(R)
# print(G)

x = distance[0] # 진행 시간
for i in range(n):
    
    y = x % (R[i]+G[i]) # 빨간불인지 파란불인지 확인하기 위해 나머지를 구함
    
    if y < R[i]: # 빨간불의 대기 시간보다 작으면 빨간불 시간
        x += (R[i]-y) + distance[i+1] # (빨간불 대기시간 - 나머지 = 나머지만큼 시간이 지났으니까 이렇게 계산됨) + 다음 신호등까지의 거리
    
    else:
        x += distance[i+1]  # 초록불일 때는 바로 지나갈 수 있어서 바로 다음 신호등까지의 거리를 더하면됨

print(x)